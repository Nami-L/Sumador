##=============================================================================
## [Filename]       Makefile.xilinx
## [Project]        -
## [Language]       GNU Makefile
## [Created]        Jan 2025
## [Modified]       -
## [Description]    - 
## [Notes]          -
## [Status]         stable
## [Revisions]      -
##=============================================================================

# ===============================  VARIABLES  =================================

# Miscellaneous variables
CUR_DATE   := $(shell date +%Y-%m-%d_%H-%M-%S)

# Directories
GIT_DIR     := $(shell git rev-parse --show-toplevel)
UVM_DIR     := $(GIT_DIR)/verification/uvm
ROOT_DIR    := $(CURDIR)
RUN_DIR     := $(ROOT_DIR)/sim
LOGS_DIR    := $(ROOT_DIR)/logs
WDB_DIR     := $(ROOT_DIR)/wdb
COV_DIR     := $(ROOT_DIR)/coverage
SCRIPTS_DIR := $(UVM_DIR)/scripts
TCL_DIR     := $(SCRIPTS_DIR)/vivado
VERDI_DIR   := $(SCRIPTS_DIR)/verdi
RTL_DIR     := $(GIT_DIR)/rtl
DPI_DIR     := $(UVM_DIR)/dpi

# UVM configurations
TEST ?= top_test
VERBOSITY ?= UVM_MEDIUM
SEED ?= 1
XVLOG_DEFINES ?= -d GIT_DIR=\"$(UVM_DIR)\"
SIMV_ARGS ?=

# Simulation mode
GUI_MODE  ?= false
RUN_FLAGS ?= -onfinish quit

# Code Coverage
CODE_COV  ?= true
COV_FLAGS ?=

# ================================  CONTROL  ==================================

# Simulation mode switch
ifeq ($(GUI_MODE),true)
	RUN_FLAGS = -gui &
endif

# Code Coverage switch
# Code Coverage switch - USAR LAS OPCIONES CORRECTAS PARA VIVADO 2024.2
ifeq ($(CODE_COV),true)
	COV_DB := $(COV_DIR)/coverage_$(TEST)_$(SEED).ucdb
	COV_FLAGS += -cm line+tgl
	# Flags correctas para Vivado 2024.2:
	XSIM_COV_FLAGS = --cov_db_name $(notdir $(COV_DB)) --cov_db_dir $(COV_DIR)
	XVLOG_COV_FLAGS = --cover all
	XELAB_COV_FLAGS = --cover all -coverage all
else
	# Limpiar las flags cuando coverage estÃ¡ desactivado
	XSIM_COV_FLAGS =
	XVLOG_COV_FLAGS =
	XELAB_COV_FLAGS =
endif
# ==============================  TOOLS SETUP  ================================

# Files
RTL_FILES = $(RTL_DIR)/adder.sv
SVE = -f $(UVM_DIR)/sve.f
VERDI_FILE = $(VERDI_DIR)/verdi.tcl
DPI_FILE = $(DPI_DIR)/external.o

# UVCs
UVCS = -f $(UVM_DIR)/adder_uvc.f

# Vivado XVLOG/XELAB/XSIM options
FILES = $(UVCS) $(RTL_FILES) $(SVE) 

XVLOG_FLAGS = -sv $(XVLOG_DEFINES) $(FILES) \
							-work work \
							-L uvm \
							$(XVLOG_DEFINES) \
							-log $(LOGS_DIR)/compile.log

XELAB_FLAGS = tb -debug all \
							-s work.tb \
							-mt 10 \
							-timescale 1ns/100ps \
							-L work -L xil_defaultlib -L uvm \
							-override_timeunit -override_timeprecision \
							-L xpm -L unisims_ver -L unimacro_ver -L secureip \
							-log $(LOGS_DIR)/elaborate.log

# -v 2    to check for C errors
XSIM_FLAGS = work.tb -wdb $(WDB_DIR)/tb.wdb \
						 -tclbatch $(TCL_DIR)/run.tcl \
						 -testplusarg UVM_TESTNAME=$(TEST) \
						 -testplusarg UVM_VERBOSITY=$(VERBOSITY) \
						 -stats -onerror stop \
						 -log $(LOGS_DIR)/simulate.log \
						 -sv_seed $(SEED) \
						 $(RUN_FLAGS)

WAVE_FLAGS = work.tb -view $(WDB_DIR)/tb.wdb -gui



# Colors
C_RED := \033[31m
C_GRE := \033[32m
C_BLU := \033[34m
C_YEL := \033[33m
C_ORA := \033[38;5;214m
NC    := \033[0m 

# Synopsys tools
SYNOPSYS_TOOLS = vivado xvlog xelab xsim

# ================================  TARGETS  ==================================
.DEFAULT_GOAL := all
SHELL         := bash

.PHONY: all
all: help
#______________________________________________________________________________

.PHONY: tools-check
tools-check: ## Check for missing tools
	@echo -e "$(C_ORA)Synopsys tool checking...$(NC)"
	@for tool in $(SYNOPSYS_TOOLS); do \
		if ! command -v $$tool >/dev/null 2>&1; then \
			echo -e "$(C_RED)Error: $(C_BLU)$$tool$(C_RED) is not installed or not in PATH$(NC)"; \
			exit 1; \
		else \
			echo -e "$(C_BLU)$$tool$(NC)\t is INSTALLED$(NC)"; \
		fi; \
	done
	@echo "All Synopsys tools are available"
#______________________________________________________________________________

.PHONY: version
vcs-version: ## Display Synopsys VCS version
	vcs -ID
#______________________________________________________________________________

.PHONY: vars
vars: ## Print Makefile variables
	@echo ""
	@echo -e "$(C_ORA)Miscellaneous variables...$(NC)"
	@echo "CUR_DATE    = $(CUR_DATE)"
	@echo ""
	@echo -e "$(C_ORA)Directory variables...$(NC)"
	@echo "GIT_DIR     = $(GIT_DIR)"
	@echo "UVM_DIR     = $(UVM_DIR)"
	@echo "ROOT_DIR    = $(ROOT_DIR)"
	@echo "RUN_DIR     = $(RUN_DIR)"
	@echo "LOGS_DIR    = $(LOGS_DIR)"
	@echo "COV_DIR     = $(COV_DIR)"
	@echo "SCRIPTS_DIR = $(SCRIPTS_DIR)"
	@echo "VERDI_DIR   = $(VERDI_DIR)"
	@echo "RTL_DIR     = $(RTL_DIR)"
	@echo "DPI_DIR     = $(DPI_DIR)"
	@echo ""
	@echo -e "$(C_ORA)UVM variables...$(NC)"
	@echo "TEST        = $(TEST)"
	@echo "VERBOSITY   = $(VERBOSITY)"
	@echo "SEED        = $(SEED)"
	@echo "VCS_DEFINES = $(VCS_DEFINES)"
	@echo "SIMV_ARGS   = $(SIMV_ARGS)"
	@echo "GUI_MODE    = $(GUI_MODE)"
	@echo "RUN_FLAGS   = $(RUN_FLAGS)"
	@echo "CODE_COV    = $(CODE_COV)"
	@echo "COV_FLAGS   = $(COV_FLAGS)"
	@echo ""
#______________________________________________________________________________

.PHONY: compile
compile: ## Runs XVLOG compilation
	@echo -e "$(C_ORA)Compiling UVM project$(NC)"
	@mkdir -p $(RUN_DIR) $(LOGS_DIR)
	cd $(RUN_DIR) && xvlog $(XVLOG_FLAGS)
#______________________________________________________________________________

.PHONY: elaborate
elaborate: ## Runs XELAB elaboration
	@echo -e "$(C_ORA)Elaborating UVM project$(NC)"
	cd $(RUN_DIR) && xelab $(XELAB_FLAGS)
#______________________________________________________________________________

.PHONY: sim
sim: ## Runs XSIM simulation using SEED
	@echo -e "$(C_ORA)Running simulation SEED=$(SEED)$(NC)"
	@mkdir -p $(WDB_DIR) $(COV_DIR)
	cd $(RUN_DIR) && xsim $(XSIM_FLAGS) 
#_________________________________________________________________________________________________________________________________________________________

.PHONY: clean
clean: ## Remove all simulation files
	@echo -e "$(C_ORA)Removing all simulation files$(NC)"
	rm -rf $(RUN_DIR) $(DPI_DIR)/*.o
#______________________________________________________________________________

.PHONY: coverage
coverage: ## Create coverage report
	@echo -e "$(C_ORA)Creating coverage report$(NC)"
	@mkdir -p $(COV_DIR)
	cd $(RUN_DIR) && urg $(URG_FLAGS)
#______________________________________________________________________________

.PHONY: coverage_report
coverage_report: ## Generate Vivado coverage reports from existing database
	@echo -e "$(C_ORA)Generating Vivado coverage reports for TEST=$(TEST) SEED=$(SEED)$(NC)"
	@mkdir -p $(COV_DIR)
	
	# Calcular rutas dentro del target
	COV_DB_PATH := $(COV_DIR)/xsim.covdb/coverage_$(TEST)_$(SEED)
	COV_REPORT_PATH := $(COV_DIR)/coverage_report_$(TEST)_$(SEED).rpt
	TOGGLE_REPORT_PATH := $(COV_DIR)/toggle_report_$(TEST)_$(SEED).rpt
	COV_DB_NAME := coverage_$(TEST)_$(SEED)
	
	@if [ -d "$(COV_DB_PATH)" ]; then \
		echo -e "$(C_ORA)Generating coverage report...$(NC)"; \
		cd $(RUN_DIR) && xsim -r $(COV_DB_NAME) -coverreport $(notdir $(COV_REPORT_PATH)); \
		echo -e "$(C_ORA)Generating toggle report...$(NC)"; \
		cd $(RUN_DIR) && xsim -r $(COV_DB_NAME) -toggle_report $(notdir $(TOGGLE_REPORT_PATH)); \
		mv $(RUN_DIR)/$(notdir $(COV_REPORT_PATH)) $(COV_REPORT_PATH); \
		mv $(RUN_DIR)/$(notdir $(TOGGLE_REPORT_PATH)) $(TOGGLE_REPORT_PATH); \
		echo -e "$(C_GRN)Coverage reports generated:$(NC)"; \
		echo -e "  - Coverage: $(COV_REPORT_PATH)"; \
		echo -e "  - Toggle: $(TOGGLE_REPORT_PATH)"; \
	else \
		echo -e "$(C_RED)Error: Coverage database not found: $(COV_DB_PATH)$(NC)"; \
		echo -e "$(C_ORA)Run 'make sim CODE_COV=true TEST=$(TEST) SEED=$(SEED)' first$(NC)"; \
		echo -e "$(C_ORA)Files in $(COV_DIR):$(NC)"; \
		ls -la $(COV_DIR)/ 2>/dev/null || echo "No coverage files found"; \
		exit 1; \
	fi
	
.PHONY: view_coverage
view_coverage: ## Open coverage in Vivado GUI
	@echo -e "$(C_ORA)Opening coverage in Vivado GUI$(NC)"
	@if [ -f "$(COV_DB)" ]; then \
		vivado -mode gui -source $(TCL_DIR)/view_coverage.tcl $(COV_DB) & \
	else \
		echo -e "$(C_RED)Error: Coverage database not found: $(COV_DB)$(NC)"; \
		echo -e "$(C_ORA)Run 'make sim CODE_COV=true' first$(NC)"; \
		exit 1; \
	fi

.PHONY: debug-vivado-flags
debug-vivado-flags: ## Show Vivado flags for coverage
	@echo -e "$(C_ORA)Vivado Coverage Flags (CODE_COV=$(CODE_COV)):$(NC)"
	@echo -e "XVLOG_COV_FLAGS: $(XVLOG_COV_FLAGS)"
	@echo -e "XELAB_COV_FLAGS: $(XELAB_COV_FLAGS)"
	@echo -e "XSIM_COV_FLAGS: $(XSIM_COV_FLAGS)"
	@echo -e "COV_DB: $(COV_DB)"


.PHONY: clean
clean-logs: ## Remove logs
	@echo -e "$(C_ORA)Removing all logs files$(NC)"
	rm -rf $(LOGS_DIR)/*
#______________________________________________________________________________

.PHONY: filter
filter: ## Filter logs
	@echo -e "$(C_ORA)Filtering logs$(NC)"
	@mkdir -p $(LOGS_DIR)/filter
	@cd $(LOGS_DIR) && grep --color=auto -B 2 -A 3 "DRIVER"     *_simv.log > $(LOGS_DIR)/filter/read.log    || true
	@cd $(LOGS_DIR) && grep --color=auto -B 2 -A 3 "MONITOR"    *_simv.log > $(LOGS_DIR)/filter/monitor.log || true
#______________________________________________________________________________

.PHONY: help
help: ## Displays help message
	@echo ""
	@echo "======================================================================"
	@echo ""
	@echo "Usage: make <target> <variables>"
	@echo ""
	@echo "--------------------------- Targets ----------------------------------"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "- make \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "--------------------------- Variables -------------------------------"
	@echo "  TEST              : Name of UVM_TEST"
	@echo "  VERBOSITY         : UVM_VERBOSITY of the simulation"
	@echo "  SEED              : Random seed used, must be an integer > 0"
	@echo "  VCS_DEFINES       : Add defines to vcs command"
	@echo "  SIMV_ARG          : Add plusargs to simv command"
	@echo "  GUI_MODE          : Enables to run the sim in gui mode [true|false]"
	@echo "  CODE_COV          : Enables code coverage [true|false]"
	@echo ""
	@echo "-------------------------- Variable Values --------------------------"
	@echo "  TEST              : $(TEST)"
	@echo "  VERBOSITY         : $(VERBOSITY)"
	@echo "  SEED              : $(SEED)"
	@echo "  VCS_DEFINES       : $(VCS_DEFINES)"
	@echo "  SIMV_ARGS         : $(SIMV_ARGS)"
	@echo "  GUI_MODE          : $(GUI_MODE)"
	@echo "  CODE_COV          : $(CODE_COV)"
	@echo ""
	@echo "======================================================================"
	@echo ""
